
%% Calculate pupil from ray tracing
%
% The lens is samples for multiple off-axis positions. At each off
% axis-position the domain of rays that pass (entrance pupil) will vary and
% be described by the intersection of 3 circles. This script aims to
% automatically estimate the 3 circles.


% Thomas Goossens

%% Load lens file
clear;close all;

lensFileName = fullfile('dgauss.22deg.50.0mm_aperture6.0.json');

exist(lensFileName,'file');


lens = lensC('fileName', lensFileName)


lens=lensReverse(lensFileName);
disp('CHeck whether using reverse or forward lens')
lens.draw


    
%Set diaphraghm diameter. Should be smaller than 9  to find the exit pupil
%in this case
diaphragm_diameter= 20;
lens.surfaceArray(6).apertureD=diaphragm_diameter;
lens.apertureMiddleD=diaphragm_diameter;

%% INput plane

firstEle=lens.surfaceArray(1); % First lens element
firstsurface_z = firstEle.sCenter(3)-firstEle.sRadius; % Seems working, but why
    
offset_inputplane=0.01;%mm
inputplane_z= firstsurface_z-offset_inputplane

%% Choose entrance pupil position w.r.t. input plane
% Ideally this distance is chosen in the plane in which the entrance pupil
% doesn't shift.  
% This is the best guess. In principle the algorithm can handle  an unknown
% entrancepupil distance


exitpupil_distance_guess =  17;

%% Run ray trace, and log which rays can pass
clear p;

flag_runraytrace=false;

if(not(flag_runraytrace))
    % IF we don't want to redo all the ray trace, load a cached ray trace
    % file. This file was generated by just using save('./cache/...')
        
    %load('./cache/dgauss.22deg.50.0mm_aperture6.0.json-offset0.01-September-29-2021_ 3-28PM.mat') % Forward lens
    load('./cache/dgauss.22deg.50.0mm_aperture6.0.json-offset0.01-October-06-2021_2-30PM.mat')
else
     
 
 % Lens reverse
positions =[0    1.0000    2.0000    3.0000    4.0000    5.0000    6.0000    7.0000    8.0000    9.0000   10.0000   10.1000   10.2000 10.3000   10.4000   10.5000];


positions =[0.1:0.2:5  6.0000    7.0000    8.0000    9.0000   10.0000   10.1000   10.2000 10.3000   10.4000   10.5000  10.6 10.7 10.8];

 
 

    
    % Initiate the arrays as NaNs, else the zeros will be interpreted at a
    % position for which a ray passed
    nbThetas=300;
    nbPhis=300;
    pupilshape_trace = nan(3,numel(positions),nbThetas,nbPhis);
    pupilshape_vignetted= nan(3,numel(positions),nbThetas,nbPhis);
    
    
    
    for p=1:numel(positions)
        disp(['positions: ' num2str(p)])
        maxTheta=40;
        nbPhis=nbThetas;
        thetas = linspace(-maxTheta,maxTheta,nbThetas);
        phis = linspace(0,359,nbPhis);

        
        count=1;
        for ph=1:numel(phis)
                        
            for t=1:numel(thetas)
                
                % Origin of ray
                origins(count,:) = [0;positions(p);inputplane_z];
                
                
                % Direction vector of ray
                phi=phis(ph);
                theta=thetas(t);
                
                
                directions(count,:) = [sind(theta).*cosd(phi);  sind(theta)*sind(phi) ; cosd(theta)];
                
                count=count+1;
            end
        end
        
        
                % Trace ray with isetlens
                
                 waveIndices=1*ones(1, size(origins, 1));
                rays = rayC('origin',origins,'direction', directions, 'waveIndex', waveIndices, 'wave', lens.wave);
                [~, ~, pOut, pOutDir] = lens.rtThroughLens(rays, rays.get('n rays'), 'visualize', false);
                
                pass_trace = not(isnan(prod(pOut,2)));    
    
                % If the ray passes the lens, save at which coordinate it
                % intersected with the chosen pupil plane.
                
                count=1;
                countVignetted=1;
                for i=1:numel(pass_trace)
                    if(pass_trace(i))
                    % Linear extrapolation from origin to find intersection
                    % with entrance_pupil plane
                    pointOnPupil = origins(i,:)+(exitpupil_distance_guess/(directions(i,3)))*directions(i,:);
                    
                    pupilshape_trace(:,p,count)=  pointOnPupil;
                    count=count+1;
                    else
                      pointOnPupil = origins(i,:)+(exitpupil_distance_guess/(directions(i,3)))*directions(i,:);
                      pupilshape_vignetted(:,p,countVignetted)=  pointOnPupil;
                      countVignetted=countVignetted+1;
                    end
                end
                
            end
        end
    
    
    % Save the ray trace, because hey, it takes a long time!
    close all;
    %save(['./cache/' lensFileName '-offset' num2str(offset_inputplane) 'scenetofilm-' datestr(now,'mmmm-dd-yyyy_HH-MMAM') '.mat'])



    

%%

% 
% %% Convex hull for each position
% 
% figure(1);clf;
% 
% numberPointsOnHull=100;
% 
% for p=1:numel(positions)
%     subplot(5,ceil(numel(positions)/5),p); hold on;
%     points=squeeze(pupilshape_trace(1:2,p,:));
%     points(:,isnan(points(1,:)))=[];
%     [k,av]=convhull(points')
%     
%     % Prune
%     k=k(round(linspace(1,numel(k),numberPointsOnHull)));
%     
%     hull{p}=points(1:2,k);
%     
%     % Plot hull
%     plot(points(1,k),points(2,k),'k.-')
% 
%     axis equal
%         
%     % random points check
%     X=3*randn(2,1000); 
%     h1=hull{p};
%      in = inpolygon(X(1,:)',X(2,:)',h1(1,:)',h1(2,:)');
%     plot(X(1,in),X(2,in),'g.') % points inside
%     plot(X(1,~in),X(2,~in),'r.') % points outside
%     
%     ylim([-10 10])
%     xlim([-10 10])
% end
% 
%     
  %% Minbound ellipse
  figure(10);clf
  
  % Prepare positions in struct to interface to vignettingFitEllipses
  for p=1:numel(positions)
      pointsPerPosition{p}=squeeze(pupilshape_trace([1 2],p,:));
  end
  
  [radii,centers,rotations]=vignettingFitEllipses(pointsPerPosition);
  
  figure(11);clf
  subplot(311)
  plot(positions,radii(1,:),positions,radii(2,:))
  title('Ellipse Radii')
  subplot(312)
  plot(positions,centers')
  title('Ellipse centers')
  subplot(313)
  plot(positions,rotations)
  title('Rotation')
  
  
  %%
  numberPointsOnHull=100;
  figure
  % compare with hull for comparison
for p=1:numel(positions)

    subplot(5,ceil(numel(positions)/5),p); hold on;

  
    % random points check using convex heull
    X=2*3*randn(2,4000); 


    % Determine whether points are inside our outside ellipse
    % I need to fix the fact that the major minor axis gets confused with X
    % and Y
    in = ((X(1,:)-centers(1,p))./radii(1,p)).^2  + ((X(2,:)-centers(2,p))./radii(2,p)).^2 <= 1;
     
    plot(X(1,in),X(2,in),'g.') % points inside
    plot(X(1,~in),X(2,~in),'r.') % points outside
     
    
    
    % calculate convex hull for comparison
    points=squeeze(pupilshape_trace(1:2,p,:));
    points(:,isnan(points(1,:)))=[];
    [k,av]=convhull(points');
    
    % Prune
    k=k(round(linspace(1,numel(k),numberPointsOnHull)));
    
    hull{p}=points(1:2,k);
    points=hull{p};
    plot(points(1,:),points(2,:),'k-')
    ylim([-10 10])
    xlim([-10 10])
    axis equal
    
end


return
 